<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BionicUtilities.NetStandard</name>
    </assembly>
    <members>
        <member name="M:BionicLibrary.NetStandard.IO.FilePathFilter.FilterFilePathsFromMixedPathsIncludingFolders(System.Collections.Generic.IEnumerable{System.String},BionicLibrary.NetStandard.IO.FileExtensions,System.Boolean)">
            <summary>
              Extracts valid paths or paths with a specified extension from a collection of paths.
              The path collection can be a mix-up of files and folders. In case the path describes a folder, the extension filter
              will be applied to all containing files.
            </summary>
            <param name="pathEntries">A string collection holding folder and/ or file paths filter.</param>
            <param name="fileExtensionsToCollect">
              A flagged Enum type that defines one or more extensions to filter from the
              collection. <see cref="T:BionicLibrary.NetStandard.IO.FileExtensions" />
            </param>
            <param name="isIncludingSubdirectories">
              Sets the filter whether to apply to sub directories or not.
              <c>True</c> includes subdirectories and <c>False</c> ignores them.
              If value is passed the parameter defaults to <c>Tue</c>.
            </param>
            <returns>IEnumerable</returns>
            <remarks>
              To ignore file extensions and collect all files found specify the <c>any</c> file extension.
              <see cref="T:BionicLibrary.NetStandard.IO.FileExtensions" />
            </remarks>
        </member>
        <member name="M:BionicLibrary.NetStandard.IO.FilePathFilter.FilterFilePathsFromMixedPathsIgnoringFolders(System.Collections.Generic.IEnumerable{System.String},BionicLibrary.NetStandard.IO.FileExtensions)">
            <summary>
              Extracts valid paths or paths with a specified extension from a collection of paths.
              The path collection can be a mix-up of files and folders. In case the path describes a folder, the filter will ignore
              it including all containing files.
            </summary>
            <param name="pathEntries">A string collection holding folder and/ or file paths filter.</param>
            <param name="fileExtensionsToCollect">
              A flagged Enum type that defines one or more extensions to filter from the
              collection. <see cref="T:BionicLibrary.NetStandard.IO.FileExtensions" />
            </param>
            <returns>IEnumerable</returns>
            <remarks>
              To ignore file extensions and collect all files found specify the <c>any</c> file extension.
              <see cref="T:BionicLibrary.NetStandard.IO.FileExtensions" />
            </remarks>
        </member>
        <member name="E:BionicLibrary.NetStandard.ViewModel.BaseViewModel.PropertyChanged">
            <summary>
            Event fired whenever a child property changes its value.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BionicLibrary.NetStandard.ViewModel.BaseViewModel.OnPropertyChanged(System.String)" -->
        <member name="M:BionicLibrary.NetStandard.ViewModel.BaseViewModel.GetErrors(System.String)">
            <inheritdoc />
        </member>
        <member name="P:BionicLibrary.NetStandard.ViewModel.BaseViewModel.HasErrors">
            <inheritdoc />
        </member>
        <member name="E:BionicLibrary.NetStandard.ViewModel.BaseViewModel.ErrorsChanged">
            <inheritdoc />
        </member>
    </members>
</doc>
