<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BionicUtilities.NetStandard</name>
    </assembly>
    <members>
        <member name="T:BionicUtilities.NetStandard.Generic.INullObject`1">
            <summary>
            Interface that returns a null object for the implementing type. Implements Null-Object Pattern
            </summary>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="P:BionicUtilities.NetStandard.Generic.INullObject`1.NullObject">
            <summary>
            Instance to return instead of NULL
            </summary>
        </member>
        <member name="T:BionicUtilities.NetStandard.INullObject">
            <summary>
            Null-Object Pattern implementation
            </summary>
        </member>
        <member name="P:BionicUtilities.NetStandard.INullObject.IsNull">
            <summary>
            Property to indicate whether the current type is NULL
            </summary>
        </member>
        <member name="M:BionicUtilities.NetStandard.IO.FilePathFilter.FilterFilePathsFromMixedPathsIncludingFolders(System.Collections.Generic.IEnumerable{System.String},BionicUtilities.NetStandard.IO.FileExtensions,System.Boolean)">
            <summary>
              Extracts valid paths or paths with a specified extension from a collection of paths.
              The path collection can be a mix-up of files and folders. In case the path describes a folder, the extension filter
              will be applied to all containing files.
            </summary>
            <param name="pathEntries">A string collection holding folder and/ or file paths filter.</param>
            <param name="fileExtensionsToCollect">
              A flagged Enum type that defines one or more extensions to filter from the
              collection. <see cref="T:BionicUtilities.NetStandard.IO.FileExtensions" />
            </param>
            <param name="isIncludingSubdirectories">
              Sets the filter whether to apply to sub directories or not.
              <c>True</c> includes subdirectories and <c>False</c> ignores them.
              If value is passed the parameter defaults to <c>Tue</c>.
            </param>
            <returns>IEnumerable</returns>
            <remarks>
              To ignore file extensions and collect all files found specify the <c>any</c> file extension.
              <see cref="T:BionicUtilities.NetStandard.IO.FileExtensions" />
            </remarks>
        </member>
        <member name="M:BionicUtilities.NetStandard.IO.FilePathFilter.FilterFilePathsFromMixedPathsIgnoringFolders(System.Collections.Generic.IEnumerable{System.String},BionicUtilities.NetStandard.IO.FileExtensions)">
            <summary>
              Extracts valid paths or paths with a specified extension from a collection of paths.
              The path collection can be a mix-up of files and folders. In case the path describes a folder, the filter will ignore
              it including all containing files.
            </summary>
            <param name="pathEntries">A string collection holding folder and/ or file paths filter.</param>
            <param name="fileExtensionsToCollect">
              A flagged Enum type that defines one or more extensions to filter from the
              collection. <see cref="T:BionicUtilities.NetStandard.IO.FileExtensions" />
            </param>
            <returns>IEnumerable</returns>
            <remarks>
              To ignore file extensions and collect all files found specify the <c>any</c> file extension.
              <see cref="T:BionicUtilities.NetStandard.IO.FileExtensions" />
            </remarks>
        </member>
        <member name="T:BionicUtilities.NetStandard.Profiling.Profiler">
            <summary>
            Helper methods to measure code execution time.
            </summary>
        </member>
        <member name="M:BionicUtilities.NetStandard.Profiling.Profiler.LogTime(System.Action)">
            <summary>
            Measures the execution time of a method.
            </summary>
            <param name="action">The code to measure execution time.</param>
            <returns>The execution time as a <see cref="T:System.TimeSpan"/>.</returns>
            <remarks>Specify a <see cref="P:BionicUtilities.NetStandard.Profiling.Profiler.LogPrinter"/> <see cref="T:System.Action"/> to customize the output target and formatting.</remarks>
        </member>
        <member name="M:BionicUtilities.NetStandard.Profiling.Profiler.LogTimes(System.Action,System.Int32)">
            <summary>
            Measures the execution time of a method.
            </summary>
            <param name="action">The code to measure execution time.</param>
            <param name="runCount">Number of iterations the <paramref name="action"/> should be executed.</param>
            <returns>A list of execution times for all <paramref name="runCount"/> number of iterations <see cref="T:System.TimeSpan"/>.</returns>
            <remarks>Specify a <see cref="P:BionicUtilities.NetStandard.Profiling.Profiler.LogPrinter"/> <see cref="T:System.Action"/> to customize the output target and formatting.</remarks>
        </member>
        <member name="M:BionicUtilities.NetStandard.Profiling.Profiler.LogAverageTime(System.Action,System.Int32)">
            <summary>
            Measures the execution time of a method.
            </summary>
            <param name="action">The code to measure execution time.</param>
            <param name="runCount">Number of iterations the <paramref name="action"/> should be executed.</param>
            <returns>The average execution time of all <paramref name="runCount"/> number of iterations as <see cref="T:System.TimeSpan"/>.</returns>
            <remarks>Specify a <see cref="P:BionicUtilities.NetStandard.Profiling.Profiler.LogPrinter"/> <see cref="T:System.Action"/> to customize the output target and formatting.</remarks>
        </member>
        <member name="E:BionicUtilities.NetStandard.ViewModel.BaseViewModel.PropertyChanged">
            <summary>
            Event fired whenever a child property changes its value.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BionicUtilities.NetStandard.ViewModel.BaseViewModel.OnPropertyChanged(System.String)" -->
        <member name="M:BionicUtilities.NetStandard.ViewModel.BaseViewModel.GetErrors(System.String)">
            <inheritdoc />
        </member>
        <member name="P:BionicUtilities.NetStandard.ViewModel.BaseViewModel.HasErrors">
            <inheritdoc />
        </member>
        <member name="E:BionicUtilities.NetStandard.ViewModel.BaseViewModel.ErrorsChanged">
            <inheritdoc />
        </member>
    </members>
</doc>
