<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BionicLibrary.Net</name>
    </assembly>
    <members>
        <member name="T:BionicLibrary.Net.Collections.Generic.ObservablePropertyChangedCollection`1">
            <summary>
            Raises <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"></see> event when the property of an item raised <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>. The change action for this particular notification is <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> with a reference to the notifying item and the item's index. The item must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:BionicLibrary.Net.Collections.Generic.ObservablePropertyChangedCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:BionicLibrary.Net.Collections.Generic.ObservablePropertyChangedCollection`1.RemoveItem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:BionicLibrary.Net.Collections.Generic.ObservablePropertyChangedCollection`1.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:BionicLibrary.Net.Collections.Generic.ObservablePropertyChangedCollection`1.SetItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="T:BionicLibrary.Net.Converter.FilePathTruncateConverter">
            <summary>
              Converter to truncate file paths exceeding a specific length by replacing a number of characters with an ellipsis.
            </summary>
        </member>
        <member name="M:BionicLibrary.Net.Utility.Generic.IAsyncRelayCommand`1.Execute(`0)">
            <summary>
            Executes the AsyncRelayCommand on the current command target.
            </summary>
            <param name="parameter">
            Data used by the command. If the command does not require data to be passed, 
            this object can be set to null.
            </param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.Generic.IAsyncRelayCommand`1.ExecuteAsync(`0)">
            <summary>
            Asynchronously executes the AsyncRelayCommand on the current command target.
            </summary>
            <param name="parameter">
            Data used by the command. If the command does not require data to be passed, 
            this object can be set to null.
            </param>
        </member>
        <member name="T:BionicLibrary.Net.Utility.Generic.AsyncRelayCommand`1">
            <summary>
            A reusable command that encapsulates the implementation of <see cref="T:System.Windows.Input.ICommand"/> with support for async/await. Enables instant creation of an ICommand without implementing the ICommand interface for each command.
            The individual <see cref="!:Execute()"/>, <see cref="!:ExecuteAsync()"/> and <see cref="!:CanExecute()"/> members are supplied via delegates.
              <seealso cref="T:System.Windows.Input.ICommand" />
            </summary>
            <remarks><c>AsyncRelayCommand</c> implements <see cref="T:System.Windows.Input.ICommand" /></remarks>
        </member>
        <member name="M:BionicLibrary.Net.Utility.Generic.AsyncRelayCommand`1.#ctor(System.Func{System.Threading.Tasks.Task})">
            <summary>
              Creates a new parameterless asynchronous command that can always execute (<see cref="M:BionicLibrary.Net.Utility.Generic.AsyncRelayCommand`1.CanExecute(`0)"/> always returns <code>true</code>).
            </summary>
            <param name="executeAsyncNoParam">The awaitable execution handler.</param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.Generic.AsyncRelayCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
              Creates a new asynchronous command that can always execute (<see cref="M:BionicLibrary.Net.Utility.Generic.AsyncRelayCommand`1.CanExecute(`0)"/> always returns <code>true</code>).
            </summary>
            <param name="executeAsync">The awaitable execution handler.</param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.Generic.AsyncRelayCommand`1.#ctor(System.Action)">
            <summary>
              Creates a new parameterless command that can always execute (<see cref="M:BionicLibrary.Net.Utility.Generic.AsyncRelayCommand`1.CanExecute(`0)"/> always returns <code>true</code>).
            </summary>
            <param name="executeNoParam">The awaitable execution handler.</param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.Generic.AsyncRelayCommand`1.#ctor(System.Action{`0})">
            <summary>
              Creates a new command that can always execute (<see cref="M:BionicLibrary.Net.Utility.Generic.AsyncRelayCommand`1.CanExecute(`0)"/> always returns <code>true</code>).
            </summary>
            <param name="execute">The awaitable execution handler.</param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.Generic.AsyncRelayCommand`1.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
              Creates a new parameterless command.
            </summary>
            <param name="executeNoParam"></param>
            <param name="canExecuteNoParam">The execution status handler.</param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.Generic.AsyncRelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
              Creates a new command.
            </summary>
            <param name="execute">The execution handler.</param>
            <param name="canExecute">The can execute handler.</param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.Generic.AsyncRelayCommand`1.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean})">
            <summary>
              Creates a new parameterless asynchronous command.
            </summary>
            <param name="executeAsyncNoParam">Parameterless execute handler.</param>
            <param name="canExecuteNoParam">Parameterless can execute handler.</param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.Generic.AsyncRelayCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Predicate{`0})">
            <summary>
              Creates a new asynchronous command.
            </summary>
            <param name="executeAsync">The awaitable execution handler.</param>
            <param name="canExecute">The can execute handler.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BionicLibrary.Net.Utility.Generic.AsyncRelayCommand`1.CanExecute(`0)" -->
        <member name="M:BionicLibrary.Net.Utility.Generic.AsyncRelayCommand`1.Execute(`0)">
            <summary>
              Executes the AsyncRelayCommand on the current command target. 
            </summary>
            <param name="parameter">
              Data used by the command. 
            </param>
            <remarks>If the execute delegate is asynchronous (awaitable) then the execution is asynchronous otherwise synchronous.</remarks>
        </member>
        <member name="M:BionicLibrary.Net.Utility.Generic.AsyncRelayCommand`1.ExecuteAsync(`0)">
            <summary>
              Executes the AsyncRelayCommand on the current command target asynchronously.
            </summary>
            <param name="parameter">
              Data used by the command. If the command does not require data to be passed,
              this object can be set to null.
            </param>
            <remarks>If the execute delegate is asynchronous (awaitable) then the execution is asynchronous otherwise the synchronous execute delegate is wrapped into an asynchronous call. This method is always awaitable and all handlers are always asynchronously executed.</remarks>
        </member>
        <member name="M:BionicLibrary.Net.Utility.IAsyncRelayCommand.CanExecute">
            <summary>
            Executes the AsyncRelayCommand on the current command target.
            </summary>
            <param name="parameter">
            Data used by the command. If the command does not require data to be passed, 
            this object can be set to null.
            </param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.IAsyncRelayCommand.Execute">
            <summary>
            Executes the AsyncRelayCommand on the current command target.
            </summary>
            <param name="parameter">
            Data used by the command. If the command does not require data to be passed, 
            this object can be set to null.
            </param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.IAsyncRelayCommand.ExecuteAsync">
            <summary>
            Executes the AsyncRelayCommand on the current command target.
            </summary>
            <param name="parameter">
            Data used by the command. If the command does not require data to be passed, 
            this object can be set to null.
            </param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.IAsyncRelayCommand.ExecuteAsync(System.Object)">
            <summary>
            Asynchronously executes the AsyncRelayCommand on the current command target.
            </summary>
            <param name="parameter">
            Data used by the command. If the command does not require data to be passed, 
            this object can be set to null.
            </param>
        </member>
        <member name="T:BionicLibrary.Net.Utility.AsyncRelayCommand">
            <summary>
            A  reusable command that encapsulates the implementation of <see cref="T:System.Windows.Input.ICommand"/> with support for async/await. Enables instant creation of an ICommand without implementing the ICommand interface for each command.
            The individual <see cref="M:BionicLibrary.Net.Utility.AsyncRelayCommand.Execute"/>, <see cref="M:BionicLibrary.Net.Utility.AsyncRelayCommand.ExecuteAsync"/> and <see cref="M:BionicLibrary.Net.Utility.AsyncRelayCommand.CanExecute"/> members are supplied via delegates.
              <seealso cref="T:System.Windows.Input.ICommand" />
            </summary>
            <remarks><c>AsyncRelayCommand</c> implements <see cref="T:System.Windows.Input.ICommand" /></remarks>
        </member>
        <member name="E:BionicLibrary.Net.Utility.AsyncRelayCommand.CanExecuteChanged">
            <summary>
              Raised when RaiseCanExecuteChanged is called.
            </summary>
        </member>
        <member name="M:BionicLibrary.Net.Utility.AsyncRelayCommand.#ctor(System.Action{System.Object})">
            <summary>
              Creates a new command that can always execute (<see cref="M:BionicLibrary.Net.Utility.AsyncRelayCommand.CanExecute"/> always returns <code>true</code>).
            </summary>
            <param name="execute">The awaitable execution handler.</param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.AsyncRelayCommand.#ctor(System.Action)">
            <summary>
              Creates a new parameterless command that can always execute (<see cref="M:BionicLibrary.Net.Utility.AsyncRelayCommand.CanExecute"/> always returns <code>true</code>).
            </summary>
            <param name="executeNoParam">The awaitable execution handler.</param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.AsyncRelayCommand.#ctor(System.Func{System.Object,System.Threading.Tasks.Task})">
            <summary>
              Creates a new command that can always execute (<see cref="M:BionicLibrary.Net.Utility.AsyncRelayCommand.CanExecute"/> always returns <code>true</code>).
            </summary>
            <param name="executeAsync">The awaitable execution handler.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BionicLibrary.Net.Utility.AsyncRelayCommand.#ctor(System.Func{System.Threading.Tasks.Task})" -->
        <member name="M:BionicLibrary.Net.Utility.AsyncRelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
              Creates a new parameterless command.
            </summary>
            <param name="executeNoParam">The execution handler.</param>
            <param name="canExecuteNoParam">The execution status handler.</param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.AsyncRelayCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
              Creates a new command.
            </summary>
            <param name="execute">The execution handler.</param>
            <param name="canExecute">The execution status handler.</param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.AsyncRelayCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean})">
            <summary>
              Creates a parameterless new asynchronous command.
            </summary>
            <param name="executeAsyncNoParam">The awaitable execution handler.</param>
            <param name="canExecuteNoParam">The execution status handler.</param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.AsyncRelayCommand.#ctor(System.Func{System.Object,System.Threading.Tasks.Task},System.Predicate{System.Object})">
            <summary>
              Creates a new asynchronous command.
            </summary>
            <param name="executeAsync">The awaitable execution handler.</param>
            <param name="canExecute">The can execute handler.</param>
        </member>
        <member name="M:BionicLibrary.Net.Utility.AsyncRelayCommand.CanExecute">
            <summary>
              Determines whether this AsyncRelayCommand can execute.
            </summary>
            <returns><code>true</code>code> if this command can be executed, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:BionicLibrary.Net.Utility.AsyncRelayCommand.Execute">
            <summary>
              Executes the AsyncRelayCommand on the current command target. 
            </summary>
            <param name="parameter">
              Data used by the command. 
            </param>
            <remarks>If the execute delegate is asynchronous (awaitable) then the execution is asynchronous otherwise synchronous.</remarks>
        </member>
        <member name="M:BionicLibrary.Net.Utility.AsyncRelayCommand.ExecuteAsync">
            <summary>
              Executes the AsyncRelayCommand on the current command target asynchronously.
            </summary>
            <remarks>If the execute delegate is asynchronous (awaitable) then the execution is asynchronous otherwise the synchronous execute delegate is wrapped into an asynchronous call. This method is always awaitable and all handlers are always asynchronously executed.</remarks>
        </member>
        <member name="M:BionicLibrary.Net.Utility.AsyncRelayCommand.CanExecute(System.Object)">
            <summary>
              Determines whether this AsyncRelayCommand can execute.
            </summary>
            <param name="parameter">
              Data used by the command. 
            </param>
            <returns><code>true</code>code> if this command can be executed, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:BionicLibrary.Net.Utility.AsyncRelayCommand.Execute(System.Object)">
            <summary>
              Executes the AsyncRelayCommand on the current command target. 
            </summary>
            <param name="parameter">
              Data used by the command. 
            </param>
            <remarks>If the execute delegate is asynchronous (awaitable) then the execution is asynchronous otherwise synchronous.</remarks>
        </member>
        <member name="M:BionicLibrary.Net.Utility.AsyncRelayCommand.ExecuteAsync(System.Object)">
            <summary>
              Executes the AsyncRelayCommand on the current command target asynchronously.
            </summary>
            <param name="parameter">
              Data used by the command. If the command does not require data to be passed,
              this object can be set to null.
            </param>
            <remarks>If the execute delegate is asynchronous (awaitable) then the execution is asynchronous otherwise the synchronous execute delegate is wrapped into an asynchronous call. This method is always awaitable and all handlers are always asynchronously executed.</remarks>
        </member>
    </members>
</doc>
